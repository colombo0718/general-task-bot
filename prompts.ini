[extractors]
identify_expense =
    嚴格限制：只輸出最終答案，不得有多餘字元、前後綴或自然語言。
    只允許以下三選一（區分大小寫）：
    expenseRecord / queryTotal / null
    【輸出格式】^(?:expenseRecord|queryTotal|null)$

    用途：判斷輸入屬於「記錄支出」還是「查詢總額」。
    規則：
    1) 若輸入包含數字或金額描述（例如「午餐 120」「花了一百元」）→ expenseRecord
    2) 若輸入包含查詢字眼（花多少、總共多少、花費統計、本月消費）→ queryTotal
    3) 其他或無法判斷 → null


get_item =
    嚴格限制：只輸出單一詞，不得有多餘字元。
    輸出：2–6 字中文或英文名詞，或 null
    【輸出格式】^(?:[\u4e00-\u9fffA-Za-z]{2,6}|null)$

    用途：擷取最有可能代表「商品或消費項目」的名詞。
    規則：
    - 只允許名詞；嚴格排除動詞與形容詞（如：買、吃、喝、搭、坐、請、花費、用、超好、便宜、昂貴、快速、慢等）。
    ; - 從訊息中取第一個金額數字或金額描述前最近的詞。
    - 如果判斷有用字上的錯誤，可以做適度的修正
    - 排除功能詞與雜訊：請、幫我、一下、的、和、跟、我們、他們、今天、昨天、本月等。
    ; - 常見例：早餐、午餐、咖啡、車票、衣服、股票。
    - 若沒有明確項目 → null

set_class =
    嚴格限制：只輸出最終答案，不得有多餘字元。
    只允許：food / transport / shopping / entertainment / invest / other / null
    【輸出格式】^(?:food|transport|shopping|entertainment|invest|other|null)$

    用途：將消費項目歸類。
    規則：
    - 若項目屬於吃喝（早餐、午餐、晚餐、咖啡、飲料） → food
    - 若屬於交通（車票、加油、捷運、計程車） → transport
    - 若屬於購物（衣服、鞋子、電器、日用品） → shopping
    - 若屬於娛樂（電影、遊戲、旅遊） → entertainment
    - 若屬於投資（股票、基金、虛擬貨幣） → invest
    ; - 其他無法分類 → other
    - 無明確項目 → null

get_price =
    嚴格限制：只輸出阿拉伯數字，不得有單位或其他字元。
    輸出：正整數或 null
    【輸出格式】^(?:[0-9]+|null)$

    用途：擷取消費金額。
    規則：
    - 取輸入文字裡最像金額的數字，中文數字需先轉為阿拉伯數字（如「一百二十」→120）。
    - 排除看似日期（例：2023、7月、2024/05/01）、編號（例：股票代號、發票號碼）。
    - 若沒有金額資訊 → null


get_date =
    嚴格限制：只輸出單一標準化日期字串（YYYY-MM-DD）
    嚴禁輸出 null、不得輸出相對代號，思考過程或不其他不必要文字。
    【輸出格式】^\d{4}-\d{2}-\d{2}$

    用途：擷取或生成花銷日期（只到日）。
    規則：
    1) 若訊息包含絕對日期（YYYY/MM/DD、YYYY-MM-DD、M月D日/號），轉換為 YYYY-MM-DD 後輸出。
    2) 若訊息包含相對詞（昨天、前天、明天、月初、月底），直接計算實際日期並輸出 YYYY-MM-DD。
       - 可嘗試在提示中執行 Python 取得今天日期後加減天數：
         ```python
         from datetime import datetime, timedelta, timezone
         today = datetime.now(timezone(timedelta(hours=8)))
         (today + timedelta(days=-1)).strftime("%Y-%m-%d")  # 昨天
         ```
    3) 若訊息未提及任何時間 → 輸出「訊息傳送當天的日期」（由系統 event.timestamp 轉換成 YYYY-MM-DD）。
    4) 僅允許單一日期字串，不得解釋或輸出多個值。
